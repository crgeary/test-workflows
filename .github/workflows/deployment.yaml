name: Deployment

on:
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  APP_ENV: production
  APP_NAME: blue

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - run: |

  build-app:
    runs-on: ubuntu-latest
    needs: prepare
    permissions:
      packages: write
    outputs:
      docker_tags: ${{ steps.meta.outputs.tags }}
      docker_digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/setup-buildx-action@v2
        id: buildx
      - uses: actions/cache@v2
        id: docker-cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.APP_NAME}}-${{ env.APP_ENV }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ env.APP_NAME}}-${{ env.APP_ENV }}-
      - uses: docker/metadata-action@v4
        id: meta
        with:
          images: "ghcr.io/crgeary/w-${{ env.APP_NAME }}"
          tags: |
            type=sha,enable=true,format=long
          labels: org.opencontainers.image.title=${{ env.APP_NAME }}
            org.opencontainers.image.vendor=CrGeary
      - uses: docker/build-push-action@v4
        id: build
        with:
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          target: production
          build-args: |
            APP_NAME=${{ env.APP_NAME }}
          push: true
          file: docker/Dockerfile
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - run: |
          echo '${{ toJson(steps.meta.outputs.tags) }}'
          echo '${{ toJson(steps.build.outputs.imageid) }}'
          echo '${{ toJson(steps.build.outputs.digest) }}'

  build-migrations:
    runs-on: ubuntu-latest
    needs: prepare
    permissions:
      packages: write
    outputs:
      docker_tags: ${{ steps.meta.outputs.tags }}
      docker_digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v3
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: docker/setup-buildx-action@v2
        id: buildx
      - uses: actions/cache@v2
        id: docker-cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.APP_NAME}}-${{ env.APP_ENV }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ env.APP_NAME}}-${{ env.APP_ENV }}-
      - uses: docker/metadata-action@v4
        id: meta
        with:
          images: "ghcr.io/crgeary/w-${{ env.APP_NAME }}"
          tags: |
            type=sha,enable=true,prefix=migrations-,format=long
          labels: org.opencontainers.image.title=${{ env.APP_NAME }}
            org.opencontainers.image.vendor=CrGeary
      - uses: docker/build-push-action@v4
        id: build
        with:
          cache-from: type=local,src=/tmp/.buildx-cache
          target: production
          build-args: |
            APP_NAME=${{ env.APP_NAME }}
          push: true
          file: docker/Dockerfile
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - run: |
          echo '${{ toJson(steps.meta.outputs.tags) }}'
          echo '${{ toJson(steps.build.outputs.imageid) }}'
          echo '${{ toJson(steps.build.outputs.digest) }}'

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build-app
      - build-migrations
    env:
      DOCKER_TAG: ${{ needs.build-app.outputs.docker_tags }}
      DOCKER_DIGEST: ${{ needs.build-app.outputs.docker_digest }}
    steps:
      - uses: actions/checkout@v3
      - run: |
          bash scripts/deploy.sh
